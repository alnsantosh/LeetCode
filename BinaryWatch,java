/*
401. Binary Watch

https://leetcode.com/problems/binary-watch/description/

A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.


For example, the above binary watch reads "3:25".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.

Example:

Input: n = 1
Return: ["1:00", "2:00", "4:00", "8:00", "0:01", "0:02", "0:04", "0:08", "0:16", "0:32"]
Note:
The order of output does not matter.
The hour must not contain a leading zero, for example "01:00" is not valid, it should be "1:00".
The minute must be consist of two digits and may contain a leading zero, for example "10:2" is not valid, it should be "10:02".
*/
/*
Idea - Brute force approach
*/
class Solution {
    List<String> res=new ArrayList<>();
    public List<String> readBinaryWatch(int num) {
        logic(num);
        return res;
    }
    void logic(int num)
    {
        for(int i=0;i<12;i++)
        {
            for(int j=0;j<60;j++)
            {
                if(Integer.bitCount(i)+Integer.bitCount(j)==num)
                {
                    StringBuffer sb=new StringBuffer();
                    sb.append(i).append(":");
                    if(j<10)
                        sb.append("0").append(j);
                    else
                        sb.append(j);
                    res.add(sb.toString());
                }
            }
        }
    }
}
/*
Time Complexity - O(1) - Since no matter what is the value of n, we have total 12*60 iterations.
Space Complexity - O(1) - as worst case 12*60 times, the stringbuffer is created whose length is 4 atmost
*/
